{"version":3,"sources":["../src/index.jsx"],"names":["JivePlaceSelector","props","value","isArray","Array","state","places","id","multiple","contentType","mainClasses","main","map","place","i","name","remove","e","length","callPicker","buttonTitle","preventDefault","jive","corev3","search","requestPicker","excludeContent","excludePlaces","excludePeople","success","add","data","error","console","JSON","stringify","filterFields","placeExists","findIndex","targetPlace","placeID","setState","$push","onChange","resources","uri","self","ref","$splice","output","default"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Created by M. Yegorov on 2016-10-25.\r\n */\r\n\r\nimport React, {Component} from 'react';\r\nimport update from 'react-addons-update';\r\nimport classnames from 'classnames';\r\n\r\nimport osapi from 'jive/osapi';\r\n\r\nimport css from './JiveTilePlacePicker.css'\r\n\r\nexport default class JivePlaceSelector extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const {value} = props;\r\n        const isArray = props.value instanceof Array;\r\n\r\n        this.state = {\r\n            places: props.value ? (isArray ? value : (value.id > 0 ? [value] : [])) : [],\r\n            multiple: isArray,\r\n            contentType: props.contentType || 'place'\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {places, multiple} = this.state;\r\n\r\n        const mainClasses = classnames({\r\n            [css.main]:true,\r\n            multiple\r\n        });\r\n\r\n        return <div className={mainClasses}>\r\n            <div className=\"selected-places\">\r\n                {places.map((place, i) =>\r\n                    <div key={i}>\r\n                        <span className=\"selected\">\r\n                            <span className=\"name\">{place.name}</span>\r\n                            <a className=\"remove\" onClick={e => this.remove(e, i)}>&times;</a>\r\n                        </span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {(multiple || !places.length) && <button onClick={::this.callPicker}>\r\n                {this.props.buttonTitle || 'Add place'}\r\n            </button>}\r\n        </div>\r\n    }\r\n\r\n    callPicker(e) {\r\n        e.preventDefault();\r\n\r\n        const {contentType} = this.state\r\n\r\n        osapi.jive.corev3.search.requestPicker({\r\n            excludeContent: contentType == 'people' || contentType == 'place',\r\n            excludePlaces: contentType == 'people' || contentType == 'content',\r\n            excludePeople: contentType == 'content' || contentType == 'place',\r\n            success: data => this.add(data),\r\n            error: data => {\r\n                console.error('error: ' + JSON.stringify(data));\r\n            }\r\n        });\r\n    }\r\n\r\n    add(place){\r\n        \r\n        const filterFields = this.props.filterFields || this.filterFields;\r\n        \r\n        const placeExists = this.state.places.findIndex(targetPlace => targetPlace.id == place.placeID) != -1;\r\n\r\n        if (!placeExists){\r\n            this.setState(update(this.state, {\r\n                places: {$push: [filterFields(place)]}\r\n            }), () => this.onChange())\r\n        }\r\n    }\r\n    \r\n    filterFields(place){\r\n        const {placeID, name, resources} = place;\r\n        \r\n        return {\r\n            name,\r\n            id: placeID,\r\n            uri: resources.self.ref\r\n        }\r\n    }\r\n\r\n    remove(e, i) {\r\n        e.preventDefault();\r\n\r\n        this.setState(update(this.state, {\r\n            places: {$splice: [[i,1]]}\r\n        }), () => this.onChange())\r\n    }\r\n\r\n    onChange(){\r\n        if (typeof this.props.onChange == 'function'){\r\n\r\n            const {places, multiple} = this.state;\r\n\r\n            let output;\r\n\r\n            if (places.length){\r\n                output = multiple ? places : places[0]\r\n            } else {\r\n                output = multiple ? [] : this.props.default || false\r\n            }\r\n\r\n            this.props.onChange(output)\r\n        }\r\n    }\r\n}"]}